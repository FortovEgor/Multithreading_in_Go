package main

import (
	"fmt"
	"time"
)

func main() {
	ch := make(chan bool)

	go func() {
		fmt.Println("1")
		time.Sleep(2 * time.Second)
		ch <- true
		fmt.Println("2")
	}()

	go func() {
		fmt.Println("BBB")
		fmt.Println(<-ch) // тут блокировка
		fmt.Println("CCC")
	}()
	time.Sleep(2 * time.Second)
	fmt.Println(<-ch)
	fmt.Println("AAA")

	time.Sleep(5 * time.Second)
	// fmt.Println(<-ch) // ждем, когда в ch откуда-то придет значение
	// fmt.Println("aaaa")
}

/* ПРИМЕЧАНИЕ К ЗАДАЧЕ:
В данной программе запускаются две доп. горутины.
1-ая записывает в канал true
2-ая читает из канала
при этом главная горутина тоже пытается прочитать из канала, но
т к установлен time.Sleep() в главной горутине ДО чтения из канала
то за это время горутина №2 успеет прочитать из канала и вывести на экран,
тем самым опустошив этот канал.
Когда time.Sleep() отрабатывает, главная горутина пытается прочитать
из канала, но на данный момент он пуст, так как из него прочитала уже 2-ая
доп горутина.
Из-за того, что теперь главная горутина хочет прочитать данные из пустого
небуферизированного канала, получаем deadlock и программа крашится.
*/
